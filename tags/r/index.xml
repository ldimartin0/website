<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Luke DiMartino</title>
    <link>https://lukedimartino.com/tags/r/</link>
    <description>Recent content in R on Luke DiMartino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jun 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lukedimartino.com/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Check Out (My Blog on) R-bloggers!</title>
      <link>https://lukedimartino.com/post/r-bloggers/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lukedimartino.com/post/r-bloggers/</guid>
      <description>&lt;p&gt;Check out &lt;a href=&#34;https://www.r-bloggers.com&#34; target=&#34;_blank&#34;&gt;R-bloggers&lt;/a&gt;, an aggregate of R blogs on the internet that now includes my blog!&lt;/p&gt;
&lt;p&gt;RSS readers are a wonderful and &lt;a href=&#34;https://mcfunley.com/choose-boring-technology&#34; target=&#34;_blank&#34;&gt;boring technology&lt;/a&gt; that I am beginning to use personally.
R-bloggers only captures posts in the R category (confusingly, not the R tag that appears at the bottom of each post).
To get all of my posts, use &lt;a href=&#34;https://www.lukedimartino.com/post/index.xml&#34; target=&#34;_blank&#34;&gt;this RSS link&lt;/a&gt;.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>My Personal R Package</title>
      <link>https://lukedimartino.com/post/ladtools/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lukedimartino.com/post/ladtools/</guid>
      <description>


&lt;p&gt;The semester is over, so what better time to get to work on my personal R package, &lt;code&gt;ladtools&lt;/code&gt;. Most of the functions are simple wrappers that improve my workflow.&lt;/p&gt;
&lt;p&gt;Find the package on my GitHub &lt;a href=&#34;https://github.com/ldimartin0/ladtools&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;geom_lm-and-scatter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;geom_lm()&lt;/code&gt; and &lt;code&gt;scatter()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I fit &lt;strong&gt;a lot&lt;/strong&gt; of linear regressions and I do not enjoy the &lt;code&gt;base::plot()&lt;/code&gt; and &lt;code&gt;base::abline()&lt;/code&gt; syntax for quick visualization. So instead, I built two functions, &lt;code&gt;geom_lm()&lt;/code&gt; and &lt;code&gt;scatter()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;geom_lm()&lt;/code&gt; is a wrapper for &lt;code&gt;geom_smooth()&lt;/code&gt; with nicer defaults. Instead of fitting a LOESS model, it fits simple OLS, does not plot standard errors, and does not return that pesky warning when the formula is not declared.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(midwest) +
  aes(x = percollege, y = percbelowpoverty) +
  geom_point() +
  geom_smooth() +
  theme_blog()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://lukedimartino.com/post/ladtools/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That warning annoys me to no end.&lt;/p&gt;
&lt;p&gt;Instead,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(midwest) +
  aes(x = percollege, y = percbelowpoverty) +
  geom_point() +
  geom_lm() +
  theme_blog()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://lukedimartino.com/post/ladtools/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scatter()&lt;/code&gt; replicates Stata’s &lt;code&gt;scatter&lt;/code&gt; command’s most frequent use case: quickly plotting data and a linear trend line through it. &lt;code&gt;scatter()&lt;/code&gt; is just &lt;code&gt;ggplot()&lt;/code&gt;, &lt;code&gt;geom_point()&lt;/code&gt;, and &lt;code&gt;geom_lm()&lt;/code&gt; combined into one call.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scatter(midwest, percbelowpoverty, percollege) +
    theme_blog()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://lukedimartino.com/post/ladtools/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;is_increasing-and-is_decreasing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;is_increasing()&lt;/code&gt; and &lt;code&gt;is_decreasing()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;These functions are wrappers meant to increase code readability.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They are mostly self explanatory. The &lt;code&gt;strictly&lt;/code&gt; parameter governs whether repeated values count as increasing/decreasing or not. It defaults to &lt;code&gt;FALSE&lt;/code&gt;, allowing repeated values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vec &amp;lt;- c(1, 1, 2, 3)

is_increasing(vec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_increasing(vec, strictly = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate_outlier_value&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;calculate_outlier_value()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In many introductory statistics classes, students are taught that values outside 3 standard deviations from the mean or 1.5 times the interquartile range plus or minus the 75th or 25th percentiles, respectively, are outliers. This test disappears quickly in most statistics curricula (for good reason), but I find it useful to understand the tails of my data, to rapidly test for influential points, and to adjust visualizations.&lt;/p&gt;
&lt;p&gt;Boxplots are an excellent visual tool for understanding the distance outliers are from the rest of the data. With larger &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, that method begins to fail. For a quick diagnosis, trimming outliers is quite convenient.&lt;/p&gt;
&lt;p&gt;Influential point diagnostics exist for many models as well, often involving refitting the model without the outlying point. Trimming does this with all outlying points, a first look into the impact of influential points.&lt;/p&gt;
&lt;p&gt;Visualizations also run into problems with outliers, especially with gradient color scales. One outlier can dramatically alter the scale, minimizing the differences between most of the distribution. Filtering or setting outliers to &lt;code&gt;NA&lt;/code&gt; is a shortcut that sacrifices little integrity to visualize the majority of the distribution properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;theme_blog&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;theme_blog()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Standard &lt;code&gt;ggplot2&lt;/code&gt; visualizations look decent, but anyone publishing graphs for a website or organization should do better. After thousands of graphs, the gray background looks a bit dated, and who decided the standard font should be Arial?&lt;/p&gt;
&lt;p&gt;Here’s a standard &lt;code&gt;ggplot2&lt;/code&gt; graph:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt;-included &lt;code&gt;theme_bw()&lt;/code&gt; cleans up image:&lt;/p&gt;
&lt;p&gt;Custom themes are best built on top of a prior theme:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_blog &amp;lt;- function() {
  theme_bw(base_size = 11, base_family = &amp;quot;Verdana&amp;quot;) %+replace%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.rdocumentation.org/packages/ggplot2/versions/3.3.6/topics/theme_get&#34;&gt;&lt;code&gt;%+replace&lt;/code&gt; operator&lt;/a&gt; updates the new theme based on &lt;code&gt;theme_bw()&lt;/code&gt;. The font now matches the site.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;theme()&lt;/code&gt; arguments specify aspects of the theme. Custom themes are intimidating at first because they are verbose and isolated: they rely on little outside &lt;code&gt;ggplot2&lt;/code&gt;. However, a detailed custom theme requires knowing only four functions of the &lt;code&gt;element_&lt;/code&gt; family — &lt;code&gt;element_blank()&lt;/code&gt;, &lt;code&gt;element_rect()&lt;/code&gt;, &lt;code&gt;element_line()&lt;/code&gt;, and &lt;code&gt;element_text()&lt;/code&gt; — and &lt;code&gt;margins()&lt;/code&gt; to control margins.&lt;/p&gt;
&lt;p&gt;First, I make everything behind the plot transparent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    theme(
      # Make everything transparent
      panel.background = element_blank(),
      plot.background = element_rect(
        fill = &amp;quot;transparent&amp;quot;,
        colour = NA
        ),
      legend.key = element_rect(
        fill = &amp;quot;transparent&amp;quot;,
        colour = NA
        ),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I eliminate tick marks because they are redundant with panel lines across the entire plots. Without tick marks, the labels along the axes are a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      # Eliminate tick marks
      axis.ticks = element_blank(),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I center and enlarge the title and subtitle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      # Adjust text elements
      plot.title = element_text(
        size = 16,
        face = &amp;quot;bold&amp;quot;,
        hjust = .5, # center align
        vjust = 1,
        margin = margin(t = 8, b = 5)
      ),
      plot.subtitle = element_text(
        size = 12,
        margin = margin(t = 1, b = 5)
      ),
      plot.caption = element_text(
        size = 8,
        hjust = 1
      ),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the tick marks are gone, the variable names on the axes and the axis labels need adjustment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      axis.title = element_text(size = 10),
      axis.text = element_text(size = 9),
      axis.text.x = element_text(
        margin = margin(1, b = 5)
      ),
      axis.text.y = element_text(
        margin = margin(r = .5, l = 5)
      ),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When positioned inside the plot, I appreciate a background for the legend. I override this setting fairly often.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      # Legend settings
      legend.background = element_rect(
        fill = &amp;quot;light gray&amp;quot;,
        color = &amp;quot;black&amp;quot;,
        size = .3
        ),
      legend.title = element_text(size = 7),
      legend.text = element_text(
        size = 7,
        margin = margin(t = 0, b = 0)
      ),
      legend.key.size = unit(.65, &amp;quot;lines&amp;quot;),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided against minor grid lines because they make the plot so busy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      # Remove minor grid lines
      panel.grid.minor = element_blank()
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! Here is what the graph looks like with &lt;code&gt;theme_blog()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
    aes(x = hp, y = mpg) +
    geom_point(aes(color = factor(cyl))) +
    geom_lm() +
    labs(
        x = &amp;quot;Horsepower&amp;quot;, 
        y = &amp;quot;Miles Per Gallon&amp;quot;, 
        color = &amp;quot;No. of Cylinders&amp;quot;,
        caption = &amp;quot;mtcars data&amp;quot;,
        title = &amp;quot;A Basic Scatterplot&amp;quot;,
        subtitle = &amp;quot;Greater Horsepower Corresponds with Lower Fuel Efficiency&amp;quot;) +
    theme_blog() +
    theme(legend.position = c(.8, .8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://lukedimartino.com/post/ladtools/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;In all honesty, I lost points in statistics classes using &lt;code&gt;is.unsorted()&lt;/code&gt; because the grader did not understand what was happening. I wrote wrappers months ago and packaged them for convenience.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Packages for Exploratory Data Analysis in R</title>
      <link>https://lukedimartino.com/post/eda-packages/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lukedimartino.com/post/eda-packages/</guid>
      <description>&lt;p&gt;These are some of my favorite packages for exploratory data analysis outside of the &lt;code&gt;tidyverse&lt;/code&gt; in R. Their functionality rarely reaches a paper, report, or production, but they are invaluable for understanding data.&lt;/p&gt;
&lt;h3 id=&#34;rio&#34;&gt;&lt;code&gt;rio&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rio&lt;/code&gt; handles all file input/output needs with a simple, intuitive interface for popular functions from &lt;code&gt;haven&lt;/code&gt;, &lt;code&gt;data.table&lt;/code&gt;, and others for individual file types. &lt;code&gt;import()&lt;/code&gt; and &lt;code&gt;export()&lt;/code&gt; abstract from that complexity with intuitive defaults like not converting strings to factors. &lt;code&gt;import_list()&lt;/code&gt; can get an entire directory of files into R easily.&lt;/p&gt;
&lt;p&gt;Find &lt;code&gt;rio&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/rio/index.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and documentation &lt;a href=&#34;https://www.rdocumentation.org/packages/rio/versions/0.5.29&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;paint&#34;&gt;&lt;code&gt;paint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;paint&lt;/code&gt; supplies beautiful terminal print methods for data frames. Compare the following methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;library&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;paint&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;library&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;dplyr&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mtcars&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mtcars&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;glimpse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mtcars&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Rows: 32
## Columns: 11
## $ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…
## $ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…
## $ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…
## $ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…
## $ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…
## $ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…
## $ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…
## $ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…
## $ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…
## $ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…
## $ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;paint&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mtcars&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## data.frame [32, 11] 
## mpg  dbl 21 21 22.8 21.4 18.7 18.1
## cyl  dbl 6 6 4 6 8 6
## disp dbl 160 160 108 258 360 225
## hp   dbl 110 110 93 110 175 105
## drat dbl 3.9 3.9 3.85 3.08 3.15 2.76
## wt   dbl 2.62 2.875 2.32 3.215 3.44 3.46
## qsec dbl 16.46 17.02 18.61 19.44 17.02 20.22
## vs   dbl 0 0 1 1 0 1
## am   dbl 1 1 1 0 0 0
## gear dbl 4 4 4 3 3 3
## carb dbl 4 4 1 1 2 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;paint&lt;/code&gt; prints clean, readable text that exploits color in the terminal. Unfortunately, Hugo won&amp;rsquo;t render that in the browser but here is output I see in my terminal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/paint.png&#34; alt=&#34;paint terminal output&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;paint&lt;/code&gt; can be set as the default print method or called independently. When set as default with &lt;code&gt;mask_print()&lt;/code&gt;, it makes &lt;code&gt;head()&lt;/code&gt;, &lt;code&gt;tail()&lt;/code&gt;, and &lt;code&gt;sample()&lt;/code&gt; much more readable. I use it as a default, so data frame outputs from other functions in this post are painted, not printed.&lt;/p&gt;
&lt;p&gt;For more details, watch &lt;a href=&#34;https://www.youtube.com/watch?v=DZuVdECq168&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Bruno Rodrigues.&lt;/p&gt;
&lt;p&gt;Find &lt;code&gt;paint&lt;/code&gt; and documentation &lt;a href=&#34;https://github.com/MilesMcBain/paint&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;dataexplorer&#34;&gt;&lt;code&gt;DataExplorer&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DataExlorer&lt;/code&gt; produces simple preliminary reports of data structure.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;create_report()&lt;/code&gt; knits an HTML document with statistics on dimensions, missing values (number in total, number by column, and number of complete rows), and column types. In addition, for each column it prints a histogram, QQ plot, correlation matrix, and conducts principal component analysis.&lt;/p&gt;
&lt;p&gt;Find &lt;code&gt;DataExplorer&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/DataExplorer/index.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and documentation &lt;a href=&#34;https://www.rdocumentation.org/packages/DataExplorer/versions/0.8.2&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;janitor&#34;&gt;&lt;code&gt;janitor&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;janitor&lt;/code&gt; solves the most general data cleaning problems in simple, user-friendly functions. &lt;code&gt;clean_names()&lt;/code&gt; changes column names to &lt;code&gt;lower_snake_case&lt;/code&gt; with smart features for recognizing word breaks, changing symbols to words (% to &amp;ldquo;percent&amp;rdquo;), and more. &lt;code&gt;tabyl()&lt;/code&gt; is an improvement on &lt;code&gt;base::table()&lt;/code&gt;, a function for reporting frequency counts and percentages, with options for missing values. &lt;code&gt;get_dupes()&lt;/code&gt; and &lt;code&gt;remove_empty()&lt;/code&gt; are useful helpers for duplicated or empty rows and columns.&lt;/p&gt;
&lt;p&gt;A great &lt;a href=&#34;https://albert-rapp.de/post/2022-01-12-janitor-showcase/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; by Albert Rapp goes into more detail with examples.&lt;/p&gt;
&lt;p&gt;Find &lt;code&gt;janitor&lt;/code&gt; &lt;a href=&#34;https://cran.csail.mit.edu/web/packages/janitor/index.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and documentation &lt;a href=&#34;https://www.rdocumentation.org/packages/janitor/versions/2.1.0&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;It genuinely feels like cheating the process. I delay teaching it to new analysts because learning &lt;code&gt;dplyr&lt;/code&gt; motions like &lt;code&gt;group_by() %&amp;gt;% summarize()&lt;/code&gt; to understand data are fundamental.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description> 
    </item>
    
  </channel>
</rss>
